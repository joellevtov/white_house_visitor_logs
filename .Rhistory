variables <- paste0("B0200", 1:10)
moco_race <- get_acs(geography="zcta", variables = "B09021_00", 1:10)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", 1:10),
year = 2019
)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_00", 1:10),
year = 2019
)
# Load the tidycensus package
library(tidycensus)
# Use get_acs to retrieve the variables with paste0
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", 1:10),
year = 2019
)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", 1:10)
)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_00", 1:10)
)
vars <- paste0("B01001_0", c(20:25, 44:49))
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", c(1:10)),
year = 2019
)
vars <- paste0("B01001_0", 1:10)
# Use get_acs to retrieve the variables with paste0
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B02001_", c(1:10)),
year = 2019
)
moco_race <- get_acs(
geography = "zcta",
variables = vars = vars),
moco_race <- get_acs(
geography = "zcta",
variables = (vars = vars)),
moco_race <- get_acs(
geography = "zcta",
variables = vars,
year = 2019
)
vars
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
vars <- paste0("B01001_0", c(20:25, 44:49))
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
vars <- paste0("B01001_0", 1:10)
vars <- paste0("B01001_0", 1:10)
vars
vars <- paste0("B01001_00", 1:9, "B01001_010")
moco_race <- get_acs(
geography = "zcta",
variables = vars
)
vars <- paste0("B01001_00", 1:10)
vars
vars <- paste0("B01001_0", 1:10)
vars
vars <- paste0("B01001_00", 1:10)
vars
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
moco_race <- get_acs(
geography = "zcta",
variables = c("B01001_001", "B01001_002")
)
moco_race <- get_acs(
geography = "state",
variables = c("B01001_001", "B01001_002")
)
moco_race <- get_acs(
geography = "zip code tabulation area",
variables = c("B01001_001", "B01001_002")
)
View(moco_race)
moco_race <- get_acs(
geography = "zip code tabulation area",
variable = c("B01001_001", "B01001_002")
)
moco_race <- get_acs(
geography = "zip code tabulation area",
variables = c("B01001_001", "B01001_002"),
year=2021
)
vars <- paste0("B01001_00", 1:10)
moco_race <- get_acs(
geography = "zip code tabulation area",
variables = vars,
year=2021
)
joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe)
joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe) |>
mutate(min_per_thousand = min_people/num_calls) |>
mutate(max_per_thousand = max_people/num_calls)
joined_moco_zip_pop |>
arrange(desc(min_per_thosand))
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe) |>
mutate(min_per_thousand = min_people/num_calls) |>
mutate(max_per_thousand = max_people/num_calls)
joined_moco_zip_pop |>
arrange(desc(min_per_thosand))
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe) |>
mutate(min_per_thousand = min_people/num_calls) |>
mutate(max_per_thousand = max_people/num_calls)
joined_moco_zip_pop |>
arrange(desc(min_per_thousand))
joined_moco_zip_pop |>
arrange(desc(max_per_thousand))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
baltco_911_calls <- read_csv("data/baltco_911_calls.csv")
baltco_911_calls_by_month <- baltco_911_calls |>
mutate(month = month(date, label=TRUE)) |>
group_by(month) |>
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
baltco_911_calls_by_month <- baltco_911_calls |>
mutate(month = month(date, label=FALSE)) |>
group_by(month) |>
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
baltco_911_calls_by_month <- baltco_911_calls |>
mutate(month = month(date, label=TRUE)) |>
group_by(month) |>
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
knitr::opts_chunk$set(echo = TRUE)
baltco_911_calls_by_month |>
ggplot()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=month, weight=total_calls))
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls))
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_minimal()
install.packages('ggthemes')
library(ggthemes)
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_economist()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_economist() +
labs(
title="More 911 Overdose Calls in Warmer Months",
x = "month",
y = "total calls",
caption = "source: Baltimore County"
)
baltco_911_calls_by_date <- baltco_911_calls |>
group_by(date) |>
summarise(
total_calls=n()
)
baltco_911_calls_by_date
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls))
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls)) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d")
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls)) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(
axis.text.x = element_text(angle = 45,  hjust=1)
)
baltco_911_calls_by_month <- baltco_911_calls |> #saving it out to a new dataframe
mutate(month = month(date, label=TRUE)) |> #making the month column usable, label=TRUE means it'll show "August" instead of "8"
group_by(month) |> #preparing
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(janitor)
library(tidycensus)
library(tidyverse)
library(janitor)
library(lubridate)
setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
###asked chatgpt how to turn a character column into a date time column, gave it some examples from our code and int told me to do this:
wh_visitor_data <- read_csv("data/combined.csv") |> clean_names() |>
mutate(toa = mdy_hm(toa)) |>
mutate(tod = mdy_hm(tod)) |>
mutate(appt_made_date = mdy_hm(appt_made_date))  |>
mutate(appt_start_date = mdy(appt_start_date))  |>
mutate(appt_end_date = mdy_hm(appt_end_date))  |>
mutate(lastentrydate = mdy_hm(lastentrydate))  |>
mutate(releasedate = mdy(releasedate))
glimpse(wh_visitor_data)
# We want a clean single dataframe to work with. Right now there are a lot of columns that might not be particularly interesting or useful. For example, let's get rid of x28 and x29, caller room, appt cancel date, terminal suffix, poa, tod, pod,  meeting room, and post.
clean_wh_visitor_data <- wh_visitor_data |>
select(-poa, -access_type, -tod, -pod, -appt_cancel_date, -meeting_room, -caller_room, -x28, -x29)
# Full transparency, I couldn't remember the code for deleting a column so I asked ChatGPT the following: "using the tidyverse, janitor, and lubridate libraries in R, how do I delete a column?"
###note - we were having problems with this so I asked chatgpt: how do I make a new column with just the date from a column that includes date and time using lubridate and the tidyverse? it told me to do mutate(toa_date = ymd_hms(toa) %>% date())
clean_wh_visitor_data |>
mutate(toa_date = ymd_hms(toa) |> date()) |>
group_by(toa_date) |>
summarize(count=n()) |>
arrange(desc(count))
# note - since there are so many NA dates here, I think we should group by appt date.
wh_visitors_by_date <- clean_wh_visitor_data |>
group_by(appt_start_date) |>
summarize(total_visits = n()) |>
arrange(desc(total_visits))
### just kidding, there are a ton of NA dates still. maybe appt end date?
wh_visitors_by_end_date <- clean_wh_visitor_data |>
group_by(appt_end_date) |>
summarize(total_visits = n()) |>
arrange(desc(total_visits))
### this seems better
View(wh_visitors_by_end_date)
View(wh_visitors_by_end_date)
View(wh_visitor_data)
View(clean_wh_visitor_data)
clean_wh_visitor_data |>
str_detect(namelast, regex("altman", ignore_case = TRUE))
clean_wh_visitor_data |>
str_detect(namelast, regex("altman", ignore_case = TRUE))
clean_wh_visitor_data |>
str_detect(namelast, "altman")
clean_wh_visitor_data |>
filter(str_detect(namelast, regex("altman", ignore_case = TRUE)))
clean_wh_visitor_data |>
filter(
str_detect(
namelast,
regex("altman", ignore_case = TRUE))
str_detect(
clean_wh_visitor_data |>
filter(
str_detect(
namelast,
regex("altman", ignore_case = TRUE))
str_detect(
clean_wh_visitor_data |>
filter(
str_detect(namelast, regex("altman", ignore_case = TRUE))
&
str_detect(namefirst, regex("sam*", ignore_case=TRUE))
)
clean_wh_visitor_data |>
filter(
str_detect(namelast, regex("altman", ignore_case = TRUE))
&
str_detect(namefirst, regex("sam*", ignore_case=TRUE))
)
clean_wh_visitor_data |>
filter(
str_detect(namelast, regex("altman", ignore_case = TRUE))
&
str_detect(namefirst, regex("^sam", ignore_case=TRUE))
)
install.packages("sf")
install.packages("sf")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(janitor)
library(maptools)
md_zips <- st_read("data/md_zips/BNDY_ZIPCodes11Digit_MDP.shp")
glimpse(md_zips)
View(md_zips)
md_zips |>
ggplot() +
geom_sf() +
theme_minimal()
install.packages('tigris')
library(tigris)
counties <- counties()
glimpse(counties)
md_counties <- counties |>
filter(STATEFP == "24")
md_counties |>
ggplot() +
geom_sf() +
theme_minimal()
ggplot() +
geom_sf(data=md_counties) +
geom_sf(data=md_zips) +
theme_minimal()
foreclosure_zip <- read_csv("data/Maryland_Notices_of_Intent_to_Foreclose_by_Zip_Code.csv") |> clean_names()
foreclosure_zip_march_2023 <- foreclosure_zip |>
select(zip, march_2023)
foreclosure_zip <- read_csv("data/Maryland_Notices_of_Intent_to_Foreclose_by_Zip_Code.csv") |> clean_names()
foreclosure_zip_march_2023 <- foreclosure_zip |>
select(zip, march_2023)
View(foreclosure_zip_march_2023)
zip_codes_with_foreclosures <- md_zips |> left_join(foreclosure_zip_march_2023, join_by(ZIPCODE1==zip))
county_centroids <- st_centroid(zip_codes_with_foreclosures)
ggplot() +
geom_sf(data=zip_codes_with_foreclosures, aes(fill=march_2023)) +
scale_colour_viridis_b(option="magma") +
theme_minimal()
library(tidycensus)
md_county_notices <- read_csv("data/Maryland_Foreclosure_Data_by_County.csv") |> slice(1) |> pivot_longer(cols=-c('Date', 'Type'), names_to='county', values_to = 'notices')
md_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
year = 2021,
state = "MD")
View(md_counties)
View(md_county_population)
md_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
year = 2021,
state = "MD",
geometry = TRUE)
md_county_population
md_county_population <- md_county_population |>
rename(county = NAME) |>
mutate(county = str_to_title(str_remove_all(county,", Maryland"))) |> #str_to_title transformes it to sentence case
mutate(county = str_trim(county,side="both")) |> #gets rid of empty space
rename(population = estimate) |>
select(county, population, geometry)
md_county_population
View(md_county_population)
md_pop_with_foreclosures <- md_county_population |>
left_join(md_county_notices, join_by(county))
md_pop_with_foreclosures
md_pop_with_foreclosures <- md_county_population |>
left_join(md_county_notices, join_by(county)) |>
mutate(rate = notices/population*1000) |>
arrange(desc(rate))
md_pop_with_foreclosures
View(md_pop_with_foreclosures)
md_pop_with_foreclosures <- md_county_population |>
left_join(md_county_notices, join_by(county))
md_pop_with_foreclosures
md_pop_with_foreclosures <- md_county_population |>
left_join(md_county_notices, join_by(county)) |>
mutate(rate = notices/population*1000) |>
arrange(desc(rate))
md_pop_with_foreclosures
county_centroids <- st_centroid(md_counties)
county_centroids_df <- as.data.frame(st_coordinates(county_centroids))
county_centroids_df$NAME <- county_centroids$NAME
ggplot() +
geom_sf(data=md_pop_with_foreclosures, aes(fill=rate)) +
geom_text(aes(x = X, y = Y, label = NAME), data = county_centroids_df, size = 3, check_overlap = TRUE) +
theme_minimal()
ggplot() +
geom_sf(data=md_pop_with_foreclosures, aes(fill=rate)) +
theme_minimal() +
scale_fill_viridis_b(option="magma")
ggplot() +
geom_sf(data=md_pop_with_foreclosures, aes(fill=rate)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(janitor)
# library(maptools)
md_zips <- st_read("data/md_zips/BNDY_ZIPCodes11Digit_MDP.shp")
glimpse(md_zips)
View(md_zips)
md_zips |>
ggplot() +
geom_sf() +
theme_minimal()
install.packages('tigris')
library(tigris)
counties <- counties()
glimpse(counties)
md_counties <- counties |>
filter(STATEFP == "24")
md_counties |>
ggplot() +
geom_sf() +
theme_minimal()
ggplot() +
geom_sf(data=md_counties) +
geom_sf(data=md_zips) +
theme_minimal()
foreclosure_zip <- read_csv("data/Maryland_Notices_of_Intent_to_Foreclose_by_Zip_Code.csv") |> clean_names()
foreclosure_zip_march_2023 <- foreclosure_zip |>
select(zip, march_2023)
View(foreclosure_zip_march_2023)
zip_codes_with_foreclosures <- md_zips |> left_join(foreclosure_zip_march_2023, join_by(ZIPCODE1==zip))
View(zip_codes_with_foreclosures)
View(md_zips)
View(zip_codes_with_foreclosures)
View(md_zips)
county_centroids <- st_centroid(zip_codes_with_foreclosures)
ggplot() +
geom_sf(data=zip_codes_with_foreclosures, aes(fill=march_2023)) +
scale_colour_viridis_b(option="magma") +
theme_minimal()
library(tidyverse)
library(sf)
library(janitor)
library(tidycensus)
#census_api_key("549950d36c22ff16455fe196bbbd01d63cfbe6cf")
md_county_notices <- read_csv("data/Maryland_Foreclosure_Data_by_County.csv") |> slice(1) |> pivot_longer(cols=-c('Date', 'Type'), names_to='county', values_to = 'notices')
md_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
year = 2021,
state = "MD")
md_county_notices <- read_csv("data/Maryland_Foreclosure_Data_by_County.csv")
View(md_county_notices)
md_county_notices <- read_csv("data/Maryland_Foreclosure_Data_by_County.csv") |> slice(1)
md_county_notices <- read_csv("data/Maryland_Foreclosure_Data_by_County.csv") |> slice(1) |> pivot_longer(cols=-c('Date', 'Type'), names_to='county', values_to = 'notices')
md_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
year = 2021,
state = "MD")
md_county_population
md_county_notices
md_pop_with_foreclosures <- md_county_population |>
left_join(md_county_notices, join_by(county))
md_county_population <- md_county_population |>
rename(county = NAME) |>
mutate(county = str_to_title(str_remove_all(county,", Maryland"))) |> #str_to_title transformes it to sentence case, str_remove_all gets rid of the selected text
mutate(county = str_trim(county,side="both")) |> #gets rid of empty space
rename(population = estimate) |>
select(county, population, geometry)
md_county_population <- get_acs(geography = "county",
variables = c(population = "B01001_001"),
year = 2021,
state = "MD",
geometry = TRUE)
md_county_population
md_county_population
md_county_notices
md_county_population <- md_county_population |>
rename(county = NAME) |>
mutate(county = str_to_title(str_remove_all(county,", Maryland"))) |> #str_to_title transformes it to sentence case, str_remove_all gets rid of the selected text
mutate(county = str_trim(county,side="both")) |> #gets rid of empty space
rename(population = estimate) |>
select(county, population, geometry)
md_county_population
md_pop_with_foreclosures <- md_county_population |>
left_join(md_county_notices, join_by(county))
md_pop_with_foreclosures
md_pop_with_foreclosures <- md_county_population |>
left_join(md_county_notices, join_by(county)) |>
mutate(rate = notices/population*1000) |>
arrange(desc(rate))
md_pop_with_foreclosures
glimpse(md_pop_with_foreclosures)
county_centroids <- st_centroid(md_counties)
county_centroids_df <- as.data.frame(st_coordinates(county_centroids))
county_centroids_df$NAME <- county_centroids$NAME
ggplot() +
geom_sf(data=md_pop_with_foreclosures, aes(fill=rate)) +
geom_text(aes(x = X, y = Y, label = NAME), data = county_centroids_df, size = 3, check_overlap = TRUE) +
theme_minimal()
ggplot() +
geom_sf(data=md_pop_with_foreclosures, aes(fill=rate)) +
theme_minimal() +
scale_fill_viridis_b(option="magma")
ggplot() +
geom_sf(data=md_pop_with_foreclosures, aes(fill=rate)) +
theme_minimal() +
scale_fill_viridis_b(option="magma",trans = "log")
