summarize(estimate)
View(md_zipcodes)
View(acs2021_5yr)
md_over_18 <- get_acs(geography="zcta", variables = "B09021_001", state='MD', year=2019)
md_over_18 <- get_acs(geography="zcta", variables = "B09021_001", state='MD', year=2021)
md_over_18 <- get_acs(geography="zcta", variables = "B09021_001", state='MD', year=2019)
rm(df)
View(moco_over_18)
rm(moco_over_18)
View(md_over_18)
View(moco_2022_zipcalls)
View(moco_2022_overdoses)
md_over_18 |>
inner_join(moco_2022_zipcalls, by("zip"=="NAME")
View(md_over_18)
View(md_over_18)
md_over_18 |>
inner_join(moco_2022_zipcalls, by("zip"=="NAME")
md_over_18 |>
md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(zip==NAME))
md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(NAME==zip))
View(maryland_zcta)
as.character(moco_2022_zipcalls)
md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(NAME==zip))
as.character(moco_2022_zipcalls$zip)
md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(NAME==zip))
as.character(moco_2022_zipcalls$zip)
md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(NAME==zip))
moco_2022_zipcalls$zip <- as.character(moco_2022_zipcalls$zip)
md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(NAME==zip))
View(md_over_18)
md_over_18 |>
left_join(moco_2022_zipcalls, join_by(NAME==zip))
md_over_18 |>
right_join(moco_2022_zipcalls, join_by(NAME==zip))
md_over_18 |>
full_join(moco_2022_zipcalls, join_by(NAME==zip))
moco_2022_zipcalls <- moco_2022_overdoses |>
group_by(zip) |>
summarise(count = n())
moco_2022_zipcalls <- moco_2022_overdoses |>
group_by(zip) |>
summarise(count = n())
moco_2022_overdoses <- read_csv("data/montgomery_2022_overdoses.csv")
moco_2022_zipcalls <- moco_2022_overdoses |>
group_by(zip) |>
summarise(count = n())
moco_2022_zipcalls <- moco_2022_overdoses |>
group_by(zip) |>
summarise(count = n())
View(md_zipcodes)
View(moco_2022_zipcalls)
moco_2022_zipcalls |>
left_join(md_over_18, join_by(NAME==zip))
moco_2022_zipcalls |>
left_join(md_over_18, join_by(zip==NAME))
moco_2022_zipcalls$zip <- as.character(moco_2022_zipcalls$zip)
moco_2022_zipcalls |>
left_join(md_over_18, join_by(zip==NAME))
View(moco_2022_zipcalls)
moco_2022_zipcalls$zip <- as.character(moco_2022_zipcalls$zip)
joined_moco_zip_pop <- moco_2022_zipcalls |>
left_join(md_over_18, join_by(zip==NAME))
View(joined_moco_zip_pop)
View(md_zipcodes)
md_over_18 <- get_acs(geography="zcta", variables = "B09021_001", state='MD', year=2019)
View(md_over_18)
moco_2022_zipcalls$zip <- as.character(moco_2022_zipcalls$zip)
joined_moco_zip_pop <- moco_2022_zipcalls |>
left_join(md_over_18, join_by(zip==NAME))
View(joined_moco_zip_pop)
View(moco_2022_zipcalls)
View(md_over_18)
moco_2022_overdoses <- read_csv("data/montgomery_2022_overdoses.csv")
moco_2022_zipcalls <- moco_2022_overdoses |>
group_by(zip) |>
summarise(count = n())
md_over_18 <- get_acs(geography="zcta", variables = "B09021_001", year=2019)
moco_2022_zipcalls$zip <- as.character(moco_2022_zipcalls$zip)
joined_moco_zip_pop <- md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(NAME==zip))
View(joined_moco_zip_pop)
moco_2022_overdoses <- read_csv("data/montgomery_2022_overdoses.csv")
moco_2022_zipcalls <- moco_2022_overdoses |>
group_by(zip) |>
summarise(count = n())
md_over_18 <- get_acs(geography="zcta", variables = "B09021_001", year=2019)
moco_2022_zipcalls$zip <- as.character(moco_2022_zipcalls$zip)
joined_moco_zip_pop <- md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(GEOID==zip))
View(joined_moco_zip_pop)
view(joined_moco_zip_pop)
View(moco_2022_zipcalls)
moco_2022_zipcalls <- moco_2022_overdoses |>
group_by(zip) |>
summarise(count = n())
md_over_18 <- get_acs(geography="zcta", variables = "B09021_001", year=2019)
joined_moco_zip_pop <- md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(GEOID==zip))
moco_2022_zipcalls$zip <- as.character(moco_2022_zipcalls$zip)
joined_moco_zip_pop <- md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(GEOID==zip))
View(joined_moco_zip_pop)
colnames(joined_moco_zip_pop$count) <- c("num_of_calls")
joined_moco_zip_pop |>
colnames("count") <- c("num_of_calls")
joined_moco_zip_pop |>
colnames(count) <- c(num_of_calls)
colnames(joined_moco_zip_pop) [5] <- c("num_of_calls")
joined_moco_zip_pop <- colnames(joined_moco_zip_pop) [5] <- c("num_of_calls")
joined_moco_zip_pop <- md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(GEOID==zip))
joined_moco_zip_pop <- joined_moco_zip_pop|>
rename(num_calls = count)
View(joined_moco_zip_pop)
joined_moco_zip_pop <- joined_moco_zip_pop|>
rename(num_calls = count, num_people = estimate)
joined_moco_zip_pop <- joined_moco_zip_pop|>
rename(num_calls = count & num_people = estimate)
joined_moco_zip_pop <- joined_moco_zip_pop|>
rename(num_calls = count) |>
rename(num_people = estimate)
joined_moco_zip_pop <- md_over_18 |>
inner_join(moco_2022_zipcalls, join_by(GEOID==zip))
joined_moco_zip_pop <- joined_moco_zip_pop|>
rename(num_calls = count) |>
rename(num_people = estimate)
rename(zip_code = GEOID)
joined_moco_zip_pop <- joined_moco_zip_pop|>
rename(zip_code = GEOID)
joined_moco_zip_pop |>
mutate(pct_calls = (num_calls/num_people)*1000)
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(pct_calls = (num_calls/num_people)*1000)
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(pct_calls = (num_calls/num_people))
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(pct_calls = (num_calls/num_people)*1000*100)
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(pct_calls = (num_calls/num_people)*1000)
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(calls_per_thousand = (num_calls/num_people)*1000)
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(calls_per_thousand = (num_calls/num_people)*1000) |>
arrange(desc(calls_per_thousand))
View(acs2021_5yr)
moco_race <- get_acs(geography="zcta", variables = "B09021_00", 1:10, year=2019)
variables <- paste0("B0200", 1:10)
moco_race <- get_acs(geography="zcta", variables = "B09021_00", 1:10)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", 1:10),
year = 2019
)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_00", 1:10),
year = 2019
)
# Load the tidycensus package
library(tidycensus)
# Use get_acs to retrieve the variables with paste0
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", 1:10),
year = 2019
)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", 1:10)
)
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_00", 1:10)
)
vars <- paste0("B01001_0", c(20:25, 44:49))
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B09021_", c(1:10)),
year = 2019
)
vars <- paste0("B01001_0", 1:10)
# Use get_acs to retrieve the variables with paste0
moco_race <- get_acs(
geography = "zcta",
variables = paste0("B02001_", c(1:10)),
year = 2019
)
moco_race <- get_acs(
geography = "zcta",
variables = vars = vars),
moco_race <- get_acs(
geography = "zcta",
variables = (vars = vars)),
moco_race <- get_acs(
geography = "zcta",
variables = vars,
year = 2019
)
vars
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
vars <- paste0("B01001_0", c(20:25, 44:49))
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
vars <- paste0("B01001_0", 1:10)
vars <- paste0("B01001_0", 1:10)
vars
vars <- paste0("B01001_00", 1:9, "B01001_010")
moco_race <- get_acs(
geography = "zcta",
variables = vars
)
vars <- paste0("B01001_00", 1:10)
vars
vars <- paste0("B01001_0", 1:10)
vars
vars <- paste0("B01001_00", 1:10)
vars
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2020
)
moco_race <- get_acs(
geography = "zcta",
variables = c("B01001_001", "B01001_002")
)
moco_race <- get_acs(
geography = "state",
variables = c("B01001_001", "B01001_002")
)
moco_race <- get_acs(
geography = "zip code tabulation area",
variables = c("B01001_001", "B01001_002")
)
View(moco_race)
moco_race <- get_acs(
geography = "zip code tabulation area",
variable = c("B01001_001", "B01001_002")
)
moco_race <- get_acs(
geography = "zip code tabulation area",
variables = c("B01001_001", "B01001_002"),
year=2021
)
vars <- paste0("B01001_00", 1:10)
moco_race <- get_acs(
geography = "zip code tabulation area",
variables = vars,
year=2021
)
joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe)
joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe) |>
mutate(min_per_thousand = min_people/num_calls) |>
mutate(max_per_thousand = max_people/num_calls)
joined_moco_zip_pop |>
arrange(desc(min_per_thosand))
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe) |>
mutate(min_per_thousand = min_people/num_calls) |>
mutate(max_per_thousand = max_people/num_calls)
joined_moco_zip_pop |>
arrange(desc(min_per_thosand))
joined_moco_zip_pop <- joined_moco_zip_pop |>
mutate(min_people = num_people-moe) |>
mutate(max_people = num_people+moe) |>
mutate(min_per_thousand = min_people/num_calls) |>
mutate(max_per_thousand = max_people/num_calls)
joined_moco_zip_pop |>
arrange(desc(min_per_thousand))
joined_moco_zip_pop |>
arrange(desc(max_per_thousand))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
baltco_911_calls <- read_csv("data/baltco_911_calls.csv")
baltco_911_calls_by_month <- baltco_911_calls |>
mutate(month = month(date, label=TRUE)) |>
group_by(month) |>
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
baltco_911_calls_by_month <- baltco_911_calls |>
mutate(month = month(date, label=FALSE)) |>
group_by(month) |>
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
baltco_911_calls_by_month <- baltco_911_calls |>
mutate(month = month(date, label=TRUE)) |>
group_by(month) |>
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
knitr::opts_chunk$set(echo = TRUE)
baltco_911_calls_by_month |>
ggplot()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=month, weight=total_calls))
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls))
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_minimal()
install.packages('ggthemes')
library(ggthemes)
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_economist()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_economist() +
labs(
title="More 911 Overdose Calls in Warmer Months",
x = "month",
y = "total calls",
caption = "source: Baltimore County"
)
baltco_911_calls_by_date <- baltco_911_calls |>
group_by(date) |>
summarise(
total_calls=n()
)
baltco_911_calls_by_date
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls))
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls)) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d")
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls)) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme(
axis.text.x = element_text(angle = 45,  hjust=1)
)
baltco_911_calls_by_month <- baltco_911_calls |> #saving it out to a new dataframe
mutate(month = month(date, label=TRUE)) |> #making the month column usable, label=TRUE means it'll show "August" instead of "8"
group_by(month) |> #preparing
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
read_csv(data/combined.csv)
library(tidyverse)
library(janitor)
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
read_csv(data/combined.csv)
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
read_csv("data/combined.csv")
wh_visitor_data <- read_csv("data/combined.csv")
problems()
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
wh_visitor_data <- read_csv("data/combined.csv")
problems()
library(tidyverse)
library(janitor)
library(lubridate)
wh_visitor_data |>
mutate(datetime(APPT_MADE_DATE))
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(APPT_MADE_DATE))
View(wh_visitor_data)
wh_visitor_data <- wh_visitor_data |>
mutate(mdy_hm(APPT_MADE_DATE))
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
wh_visitor_data <- read_csv("data/combined.csv")
wh_visitor_data <- wh_visitor_data |>
mdy_hm(APPT_MADE_DATE)
wh_visitor_data <- read_csv("data/combined.csv")
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE)))
problems()
wh_visitor_data |>
problems()
wh_visitor_data <- wh_visitor_data |>
mutate(appt_made = mdy_hm(APPT_MADE_DATE))
mutate(as_datetime(mdy_hm(TOA)))
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
wh_visitor_data <- read_csv("data/combined.csv")
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_datetime(mdy_hm(TOA)))
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
wh_visitor_data <- read_csv("data/combined.csv")
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_datetime(mdy_hm(TOA))) |>
mutate(as_datetime(mdy_hm(TOD))) |>
mutate(as_datetime(mdy_hm(APPT_START_DATE))) |>
mutate(as_datetime(mdy_hm(APPT_END_DATE))) |>
mutate(as_datetime(mdy_hm(APPT_CANCEL_DATE))) |>
mutate(as_datetime(mdy_hm(LASTENTRYDATE))) |>
mutate(as_datetime(mdy(RELEASEDATE)))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(janitor)
library(tidycensus)
pg_overdoses_2022 <- read_csv("data/prince_georges_2022_overdoses.csv")
pg_overdoses_2022 <- pg_overdoses_2022 |>
(date = date(datetime)) |>
(week = week(datetime)) |>
(month = month(datetime, label=TRUE))
wh_visitor_data <- wh_visitor_data |>
as_datetime(mdy_hm(APPT_MADE_DATE))
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
wh_visitor_data <- read_csv("data/combined.csv")
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_datetime(mdy_hm(TOA))) |>
mutate(as_datetime(mdy_hm(TOD))) |>
mutate(as_datetime(mdy_hm(APPT_START_DATE))) |>
mutate(as_datetime(mdy_hm(APPT_END_DATE))) |>
mutate(as_datetime(mdy_hm(APPT_CANCEL_DATE))) |>
mutate(as_datetime(mdy_hm(LASTENTRYDATE))) |>
mutate(as_datetime(mdy(RELEASEDATE)))
## I'm sure there's a way to get it to not put it in a new column but I can't figure out how - I know mutate means it will convert into a new column but...it doesn't work without the "mutate"
## set working directory
## setwd("~/Google Drive/My Drive/JOUR472/data_journalism_2023_fall/white_house_visitor_logs")
wh_visitor_data <- read_csv("data/combined.csv")
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_datetime(mdy_hm(TOA))) |>
mutate(as_datetime(mdy_hm(TOD))) |>
mutate(as_datetime(mdy_hm(APPT_START_DATE))) |>
mutate(as_datetime(mdy_hm(APPT_END_DATE))) |>
mutate(as_datetime(mdy_hm(APPT_CANCEL_DATE))) |>
mutate(as_datetime(mdy_hm(LASTENTRYDATE))) |>
mutate(as_datetime(mdy(RELEASEDATE))) |>
## I'm sure there's a way to get it to not put it in a new column but I can't figure out how - I know mutate means it will convert into a new column but...it doesn't work without the "mutate." I dunno.
clean_names()
wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_datetime(mdy(TOA))) |>
mutate(as_datetime(mdy(TOD))) |>
mutate(as_datetime(mdy(APPT_START_DATE))) |>
mutate(as_datetime(mdy(APPT_END_DATE))) |>
mutate(as_datetime(mdy(APPT_CANCEL_DATE))) |>
mutate(as_datetime(mdy(LASTENTRYDATE))) |>
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_datetime(mdy(TOA))) |>
mutate(as_datetime(mdy(TOD))) |>
mutate(as_datetime(mdy(APPT_START_DATE))) |>
mutate(as_datetime(mdy(APPT_END_DATE))) |>
mutate(as_datetime(mdy(APPT_CANCEL_DATE))) |>
mutate(as_datetime(mdy(LASTENTRYDATE))) |>
wh_visitor_data <- wh_visitor_data |>
mutate(as_datetime(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_date(mdy(TOA))) |>
mutate(as_date(mdy(TOD))) |>
mutate(as_date(mdy(APPT_START_DATE))) |>
mutate(as_date(mdy(APPT_END_DATE))) |>
mutate(as_date(mdy(APPT_CANCEL_DATE))) |>
mutate(as_date(mdy(LASTENTRYDATE)))
wh_visitor_data <- wh_visitor_data |>
mutate(as_date(mdy_hm(APPT_MADE_DATE))) |>  ## when I run this, R works but tells me that "14 failed to parse." I cannot for the life of me figure out what it's unhappy about
mutate(as_date(mdy(TOA))) |>
mutate(as_date(mdy(TOD))) |>
mutate(as_date(mdy(APPT_START_DATE))) |>
mutate(as_date(mdy(APPT_END_DATE))) |>
mutate(as_date(mdy(APPT_CANCEL_DATE))) |>
mutate(as_date(mdy(LASTENTRYDATE)))
